// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlRepository

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO user (
    name, password
) VALUES (
    ?, ?
)
RETURNING id, name, password
`

type CreateAuthorParams struct {
	Name     string
	Password string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM user
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, password FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, password FROM user
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
