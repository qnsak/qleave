// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/leave.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "leaveManager/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLeaveUsecase is a mock of LeaveUsecase interface.
type MockLeaveUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLeaveUsecaseMockRecorder
}

// MockLeaveUsecaseMockRecorder is the mock recorder for MockLeaveUsecase.
type MockLeaveUsecaseMockRecorder struct {
	mock *MockLeaveUsecase
}

// NewMockLeaveUsecase creates a new mock instance.
func NewMockLeaveUsecase(ctrl *gomock.Controller) *MockLeaveUsecase {
	mock := &MockLeaveUsecase{ctrl: ctrl}
	mock.recorder = &MockLeaveUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaveUsecase) EXPECT() *MockLeaveUsecaseMockRecorder {
	return m.recorder
}

// ApplyLeave mocks base method.
func (m *MockLeaveUsecase) ApplyLeave(arg0 string, arg1 domain.ApplyLeaveRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyLeave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyLeave indicates an expected call of ApplyLeave.
func (mr *MockLeaveUsecaseMockRecorder) ApplyLeave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLeave", reflect.TypeOf((*MockLeaveUsecase)(nil).ApplyLeave), arg0, arg1)
}

// ApproveLeave mocks base method.
func (m *MockLeaveUsecase) ApproveLeave(arg0 domain.ApproveLeaveRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLeave", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveLeave indicates an expected call of ApproveLeave.
func (mr *MockLeaveUsecaseMockRecorder) ApproveLeave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLeave", reflect.TypeOf((*MockLeaveUsecase)(nil).ApproveLeave), arg0)
}

// CancelLeave mocks base method.
func (m *MockLeaveUsecase) CancelLeave(LeaveId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLeave", LeaveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelLeave indicates an expected call of CancelLeave.
func (mr *MockLeaveUsecaseMockRecorder) CancelLeave(LeaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLeave", reflect.TypeOf((*MockLeaveUsecase)(nil).CancelLeave), LeaveId)
}

// GetApplyLeaveInfo mocks base method.
func (m *MockLeaveUsecase) GetApplyLeaveInfo() (domain.ApplyLeaveInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplyLeaveInfo")
	ret0, _ := ret[0].(domain.ApplyLeaveInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplyLeaveInfo indicates an expected call of GetApplyLeaveInfo.
func (mr *MockLeaveUsecaseMockRecorder) GetApplyLeaveInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplyLeaveInfo", reflect.TypeOf((*MockLeaveUsecase)(nil).GetApplyLeaveInfo))
}

// GetApproveList mocks base method.
func (m *MockLeaveUsecase) GetApproveList(employeeID string, page int64) (domain.GetApproveListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApproveList", employeeID, page)
	ret0, _ := ret[0].(domain.GetApproveListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApproveList indicates an expected call of GetApproveList.
func (mr *MockLeaveUsecaseMockRecorder) GetApproveList(employeeID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApproveList", reflect.TypeOf((*MockLeaveUsecase)(nil).GetApproveList), employeeID, page)
}

// GetAttendanceRecord mocks base method.
func (m *MockLeaveUsecase) GetAttendanceRecord(departmentId int64, currentTime time.Time) (map[string][]domain.LeaveByDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendanceRecord", departmentId, currentTime)
	ret0, _ := ret[0].(map[string][]domain.LeaveByDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendanceRecord indicates an expected call of GetAttendanceRecord.
func (mr *MockLeaveUsecaseMockRecorder) GetAttendanceRecord(departmentId, currentTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendanceRecord", reflect.TypeOf((*MockLeaveUsecase)(nil).GetAttendanceRecord), departmentId, currentTime)
}

// GetLeaveIsComing mocks base method.
func (m *MockLeaveUsecase) GetLeaveIsComing(id string) (domain.GetLeaveIsComing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveIsComing", id)
	ret0, _ := ret[0].(domain.GetLeaveIsComing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveIsComing indicates an expected call of GetLeaveIsComing.
func (mr *MockLeaveUsecaseMockRecorder) GetLeaveIsComing(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveIsComing", reflect.TypeOf((*MockLeaveUsecase)(nil).GetLeaveIsComing), id)
}

// GetLeaveList mocks base method.
func (m *MockLeaveUsecase) GetLeaveList(employeeID string, page int64) (domain.GetLeave, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveList", employeeID, page)
	ret0, _ := ret[0].(domain.GetLeave)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveList indicates an expected call of GetLeaveList.
func (mr *MockLeaveUsecaseMockRecorder) GetLeaveList(employeeID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveList", reflect.TypeOf((*MockLeaveUsecase)(nil).GetLeaveList), employeeID, page)
}

// GetLeaveType mocks base method.
func (m *MockLeaveUsecase) GetLeaveType() ([]domain.LeaveType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveType")
	ret0, _ := ret[0].([]domain.LeaveType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveType indicates an expected call of GetLeaveType.
func (mr *MockLeaveUsecaseMockRecorder) GetLeaveType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveType", reflect.TypeOf((*MockLeaveUsecase)(nil).GetLeaveType))
}

// MockLeaveRepository is a mock of LeaveRepository interface.
type MockLeaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeaveRepositoryMockRecorder
}

// MockLeaveRepositoryMockRecorder is the mock recorder for MockLeaveRepository.
type MockLeaveRepositoryMockRecorder struct {
	mock *MockLeaveRepository
}

// NewMockLeaveRepository creates a new mock instance.
func NewMockLeaveRepository(ctrl *gomock.Controller) *MockLeaveRepository {
	mock := &MockLeaveRepository{ctrl: ctrl}
	mock.recorder = &MockLeaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaveRepository) EXPECT() *MockLeaveRepositoryMockRecorder {
	return m.recorder
}

// CreateLeave mocks base method.
func (m *MockLeaveRepository) CreateLeave(arg0 domain.Leave) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeave", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLeave indicates an expected call of CreateLeave.
func (mr *MockLeaveRepositoryMockRecorder) CreateLeave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeave", reflect.TypeOf((*MockLeaveRepository)(nil).CreateLeave), arg0)
}

// CreateLeaveRecord mocks base method.
func (m *MockLeaveRepository) CreateLeaveRecord(arg0 int64, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeaveRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLeaveRecord indicates an expected call of CreateLeaveRecord.
func (mr *MockLeaveRepositoryMockRecorder) CreateLeaveRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeaveRecord", reflect.TypeOf((*MockLeaveRepository)(nil).CreateLeaveRecord), arg0, arg1, arg2)
}

// DeleteLeave mocks base method.
func (m *MockLeaveRepository) DeleteLeave(leaveId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLeave", leaveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLeave indicates an expected call of DeleteLeave.
func (mr *MockLeaveRepositoryMockRecorder) DeleteLeave(leaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLeave", reflect.TypeOf((*MockLeaveRepository)(nil).DeleteLeave), leaveId)
}

// GetAttendanceRecord mocks base method.
func (m *MockLeaveRepository) GetAttendanceRecord(departmentId int64) ([]domain.AttendanceRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendanceRecord", departmentId)
	ret0, _ := ret[0].([]domain.AttendanceRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendanceRecord indicates an expected call of GetAttendanceRecord.
func (mr *MockLeaveRepositoryMockRecorder) GetAttendanceRecord(departmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendanceRecord", reflect.TypeOf((*MockLeaveRepository)(nil).GetAttendanceRecord), departmentId)
}

// GetEmployeeListByDepartment mocks base method.
func (m *MockLeaveRepository) GetEmployeeListByDepartment(departmentId int64) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeListByDepartment", departmentId)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeListByDepartment indicates an expected call of GetEmployeeListByDepartment.
func (mr *MockLeaveRepositoryMockRecorder) GetEmployeeListByDepartment(departmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeListByDepartment", reflect.TypeOf((*MockLeaveRepository)(nil).GetEmployeeListByDepartment), departmentId)
}

// GetLeaveByDirectorId mocks base method.
func (m *MockLeaveRepository) GetLeaveByDirectorId(userId string, page int64) (domain.GetLeavePage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveByDirectorId", userId, page)
	ret0, _ := ret[0].(domain.GetLeavePage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveByDirectorId indicates an expected call of GetLeaveByDirectorId.
func (mr *MockLeaveRepositoryMockRecorder) GetLeaveByDirectorId(userId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveByDirectorId", reflect.TypeOf((*MockLeaveRepository)(nil).GetLeaveByDirectorId), userId, page)
}

// GetLeaveById mocks base method.
func (m *MockLeaveRepository) GetLeaveById(arg0 int64) (domain.Leave, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveById", arg0)
	ret0, _ := ret[0].(domain.Leave)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveById indicates an expected call of GetLeaveById.
func (mr *MockLeaveRepositoryMockRecorder) GetLeaveById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveById", reflect.TypeOf((*MockLeaveRepository)(nil).GetLeaveById), arg0)
}

// GetLeaveByStartDate mocks base method.
func (m *MockLeaveRepository) GetLeaveByStartDate(departmentId int64, timeStar, timeAfter time.Time) ([]domain.Leave, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveByStartDate", departmentId, timeStar, timeAfter)
	ret0, _ := ret[0].([]domain.Leave)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveByStartDate indicates an expected call of GetLeaveByStartDate.
func (mr *MockLeaveRepositoryMockRecorder) GetLeaveByStartDate(departmentId, timeStar, timeAfter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveByStartDate", reflect.TypeOf((*MockLeaveRepository)(nil).GetLeaveByStartDate), departmentId, timeStar, timeAfter)
}

// GetLeaveByUserId mocks base method.
func (m *MockLeaveRepository) GetLeaveByUserId(userId string, page int64) (domain.GetLeavePage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveByUserId", userId, page)
	ret0, _ := ret[0].(domain.GetLeavePage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveByUserId indicates an expected call of GetLeaveByUserId.
func (mr *MockLeaveRepositoryMockRecorder) GetLeaveByUserId(userId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveByUserId", reflect.TypeOf((*MockLeaveRepository)(nil).GetLeaveByUserId), userId, page)
}

// GetLeaveType mocks base method.
func (m *MockLeaveRepository) GetLeaveType() ([]domain.LeaveType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveType")
	ret0, _ := ret[0].([]domain.LeaveType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveType indicates an expected call of GetLeaveType.
func (mr *MockLeaveRepositoryMockRecorder) GetLeaveType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveType", reflect.TypeOf((*MockLeaveRepository)(nil).GetLeaveType))
}

// GetLeavesIsSuccess mocks base method.
func (m *MockLeaveRepository) GetLeavesIsSuccess(userId string) ([]domain.Leave, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeavesIsSuccess", userId)
	ret0, _ := ret[0].([]domain.Leave)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeavesIsSuccess indicates an expected call of GetLeavesIsSuccess.
func (mr *MockLeaveRepositoryMockRecorder) GetLeavesIsSuccess(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeavesIsSuccess", reflect.TypeOf((*MockLeaveRepository)(nil).GetLeavesIsSuccess), userId)
}

// GetNationalHoliday mocks base method.
func (m *MockLeaveRepository) GetNationalHoliday() ([]domain.NationalHoliday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNationalHoliday")
	ret0, _ := ret[0].([]domain.NationalHoliday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNationalHoliday indicates an expected call of GetNationalHoliday.
func (mr *MockLeaveRepositoryMockRecorder) GetNationalHoliday() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNationalHoliday", reflect.TypeOf((*MockLeaveRepository)(nil).GetNationalHoliday))
}

// UpdateLeave mocks base method.
func (m *MockLeaveRepository) UpdateLeave(leaveId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeave", leaveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeave indicates an expected call of UpdateLeave.
func (mr *MockLeaveRepositoryMockRecorder) UpdateLeave(leaveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeave", reflect.TypeOf((*MockLeaveRepository)(nil).UpdateLeave), leaveId)
}
