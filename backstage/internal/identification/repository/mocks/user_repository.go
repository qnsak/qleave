// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "leaveManager/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0)
}

// FetchEmployeeInformation mocks base method.
func (m *MockUserRepository) FetchEmployeeInformation(employeeEmail string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEmployeeInformation", employeeEmail)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEmployeeInformation indicates an expected call of FetchEmployeeInformation.
func (mr *MockUserRepositoryMockRecorder) FetchEmployeeInformation(employeeEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEmployeeInformation", reflect.TypeOf((*MockUserRepository)(nil).FetchEmployeeInformation), employeeEmail)
}

// GetUserInfo mocks base method.
func (m *MockUserRepository) GetUserInfo(userId string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", userId)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserRepositoryMockRecorder) GetUserInfo(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserRepository)(nil).GetUserInfo), userId)
}

// MockLoginUsecase is a mock of LoginUsecase interface.
type MockLoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUsecaseMockRecorder
}

// MockLoginUsecaseMockRecorder is the mock recorder for MockLoginUsecase.
type MockLoginUsecaseMockRecorder struct {
	mock *MockLoginUsecase
}

// NewMockLoginUsecase creates a new mock instance.
func NewMockLoginUsecase(ctrl *gomock.Controller) *MockLoginUsecase {
	mock := &MockLoginUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUsecase) EXPECT() *MockLoginUsecaseMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockLoginUsecase) CheckPasswordHash(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockLoginUsecaseMockRecorder) CheckPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockLoginUsecase)(nil).CheckPasswordHash), arg0, arg1)
}

// CreateAccessToken mocks base method.
func (m *MockLoginUsecase) CreateAccessToken(arg0 domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockLoginUsecaseMockRecorder) CreateAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockLoginUsecase)(nil).CreateAccessToken), arg0)
}

// CreateRefreshToken mocks base method.
func (m *MockLoginUsecase) CreateRefreshToken(arg0 domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockLoginUsecaseMockRecorder) CreateRefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockLoginUsecase)(nil).CreateRefreshToken), arg0)
}

// CreateUser mocks base method.
func (m *MockLoginUsecase) CreateUser(arg0 domain.CreateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockLoginUsecaseMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockLoginUsecase)(nil).CreateUser), arg0)
}

// GetPasswordHash mocks base method.
func (m *MockLoginUsecase) GetPasswordHash(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordHash indicates an expected call of GetPasswordHash.
func (mr *MockLoginUsecaseMockRecorder) GetPasswordHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHash", reflect.TypeOf((*MockLoginUsecase)(nil).GetPasswordHash), arg0)
}

// GetUserInfo mocks base method.
func (m *MockLoginUsecase) GetUserInfo(userId string) (domain.GetUserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", userId)
	ret0, _ := ret[0].(domain.GetUserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockLoginUsecaseMockRecorder) GetUserInfo(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockLoginUsecase)(nil).GetUserInfo), userId)
}

// Login mocks base method.
func (m *MockLoginUsecase) Login(arg0 domain.LoginRequest) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginUsecase)(nil).Login), arg0)
}
